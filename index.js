require('dotenv').config();
const db = require('./db');
const { Bot } = require('grammy');
const { transcribeVoice } = require('./stt');
const { getFeedback } = require('./feedback');
const { InlineKeyboard } = require('grammy');

const lessons = require('./lessons');
const cron = require('node-cron');

// –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è Markdown-—Å–∏–º–≤–æ–ª—ñ–≤
function md(s = '') {
  return s.replace(/[_*[\]()~`>#+\-=|{}.!]/g, m => '\\' + m);
}

const bot = new Bot(process.env.BOT_TOKEN);

// In-memory sessions for setup, lesson, and SRS
const sessions = {};

// Ensure words table for SRS
db.prepare(`
  CREATE TABLE IF NOT EXISTS words (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT,
    word TEXT,
    translation TEXT,
    example TEXT,
    nextReview TEXT,
    interval INTEGER
  )
`).run();

// /start: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.command('start', async ctx => {
  const uid = String(ctx.from.id);
  const now = new Date().toISOString();
  db.prepare(
    `INSERT OR IGNORE INTO users (user_id, first_seen, last_seen) VALUES (?, ?, ?)`
  ).run(uid, now, now);
  db.prepare(
    `UPDATE users SET last_seen = ? WHERE user_id = ?`
  ).run(now, uid);
  db.prepare(
    `INSERT OR IGNORE INTO stats (user_id) VALUES (?)`
  ).run(uid);
  return ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å /help.');
});

// /stats: –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.command('stats', async ctx => {
  try {
    const uid = String(ctx.from.id);
    const now = new Date().toISOString();
    db.prepare(
      `INSERT OR IGNORE INTO users (user_id, first_seen, last_seen) VALUES (?, ?, ?)`
    ).run(uid, now, now);
    db.prepare(
      `UPDATE users SET last_seen = ? WHERE user_id = ?`
    ).run(now, uid);
    db.prepare(
      `INSERT OR IGNORE INTO stats (user_id) VALUES (?)`
    ).run(uid);

const userRow = db.prepare(
  `SELECT first_seen FROM users WHERE user_id = ?`
).get(uid);

const statRow = db.prepare(
  `SELECT lessons_done, voice_count, streak_days FROM stats WHERE user_id = ?`
).get(uid);

const firstSeen = userRow?.first_seen ? new Date(userRow.first_seen) : new Date();
const joined = firstSeen.toLocaleDateString('uk-UA', {
  day: 'numeric', month: 'long', year: 'numeric'
});

    const statsMessage =
      `üë§ *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å*\n` +
      `‚Äì üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ: *${joined}*\n` +
      `‚Äì üéß –ì–æ–ª–æ—Å–æ–≤–∏—Ö —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—å: *${statRow.voice_count || 0}*\n` +
      `‚Äì üìù –£—Ä–æ–∫—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: *${statRow.lessons_done || 0}*\n` +
      `‚Äì üî• –°—Ç—Ä—ñ–∫: *${statRow.streak_days || 0}* –¥–Ω—ñ–≤`;
    await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
  } catch (e) {
    console.error(e);
    await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// /setup: –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.command('setup', ctx => {
  const uid = String(ctx.from.id);
  sessions[uid] = { action: 'setup', step: 1, data: {} };
  return ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏? üòä');
});

// /lesson: –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —É—Ä–æ–∫
bot.command('lesson', async ctx => {
  const uid = String(ctx.from.id);
  const prefs = db.prepare(
    `SELECT name, level, goals FROM preferences WHERE user_id = ?`
  ).get(uid);
  if (!prefs) return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ–º–∞–Ω–¥–æ—é /setup');
  const list = lessons[prefs.level] || [];
  if (!list.length) return ctx.reply(`–ù–∞ —Ä—ñ–≤–Ω—ñ ${prefs.level} —â–µ –Ω–µ–º–∞—î –≥–æ—Ç–æ–≤–∏—Ö —É—Ä–æ–∫—ñ–≤.`);
  const lesson = list[Math.floor(Math.random() * list.length)];

  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª —É—Ä–æ–∫—É
await ctx.reply(
    `–ü—Ä–∏–≤—ñ—Ç, ${md(prefs.name)}! –°—å–æ–≥–æ–¥–Ω—ñ —Ç–µ–º–∞: *${md(lesson.topic)}*`,
    { parse_mode: 'Markdown' }
);

  const vocabList = lesson.vocab
  .map(v => `‚Äì *${md(v.word)}* ‚Äî ${md(v.translation)}\n  _${md(v.example)}_`)
  .join('\n\n');
  await ctx.reply(`üìö *–°–ª–æ–≤–Ω–∏–∫:*\n\n${vocabList}`, { parse_mode: 'Markdown' });
  const dialogue = lesson.scenario
  .map(s => `${md(s.speaker)}: ${md(s.text)}`)
  .join('\n');
  await ctx.reply(`üí¨ *–°—Ü–µ–Ω–∞—Ä—ñ–π:*\n\n${dialogue}`, { parse_mode: 'Markdown' });

  // –ü–æ—á–∏–Ω–∞—î–º–æ —Å–µ—Å—ñ—é —É—Ä–æ–∫—É
  sessions[uid] = { action: 'lesson', inLesson: true };
});

// /addword: –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞ –¥–æ SRS
bot.command('addword', ctx => {
  const uid = String(ctx.from.id);
  sessions[uid] = { action: 'addword', step: 1, data: {} };
  return ctx.reply('–Ø–∫–µ —Å–ª–æ–≤–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏?');
});

bot.command('cancel', ctx => {
  const uid = String(ctx.from.id);
  delete sessions[uid];
  return ctx.reply('–°–µ—Å—ñ—é —Å–∫–∏–Ω—É—Ç–æ. –ú–æ–∂–µ—à –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ ‚ú®');
});

bot.command('help', ctx => {
  return ctx.reply(
    `–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n` +
    `/start ‚Äì —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n` +
    `/setup ‚Äì –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n` +
    `/stats ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
    `/lesson ‚Äì –ø–æ—á–∞—Ç–∏ —É—Ä–æ–∫\n` +
    `/addword ‚Äì –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–Ω–∏–∫\n` +
    `/review ‚Äì –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–∞ (SRS)\n` +
    `/allwords ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞\n` +
    `/getremind ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n` +
    `/setremind HH:MM ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n` +
    `/cancel ‚Äì —Å–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é`,
    { parse_mode: 'Markdown' }
  );
});



bot.catch(err => {
  console.error('Bot error:', err);
});


// /review: –ø–æ–∫–∞–∑—É—î–º–æ —Å–ª–æ–≤–∞ –¥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
// /review: –ø–æ–∫–∞–∑—É—î–º–æ —Å–ª–æ–≤–∞ –¥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
bot.command('review', async ctx => {
  const uid = String(ctx.from.id);
  const nowIso = new Date().toISOString();

  const rows = db.prepare(
  `SELECT * FROM words
   WHERE user_id = ? AND nextReview <= ?
   ORDER BY nextReview ASC
   LIMIT 1`
).all(uid, nowIso);

// const rows = db.prepare(
//   `SELECT * FROM words WHERE user_id = ? ORDER BY nextReview ASC LIMIT 1`
// ).all(uid);


  if (!rows.length) {
    return ctx.reply('–°–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î ‚úÖ');
  }

  const row = rows[0];
  const keyboard = new InlineKeyboard()
    .text("üîÅ Again", `rate:${row.id}:1`)
    .text("üòì Hard", `rate:${row.id}:2`).row()
    .text("üôÇ Good", `rate:${row.id}:3`)
    .text("üöÄ Easy", `rate:${row.id}:4`);

  await ctx.reply(
    `‚Äì *${md(row.word)}* ‚Äî ${md(row.translation)}\n  _${md(row.example)}_`,
    { parse_mode: 'Markdown', reply_markup: keyboard }
  );

});

// /allwords: –ø–æ–∫–∞–∑ —É—Å—ñ—Ö —Å–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.command('allwords', ctx => {
  const uid = String(ctx.from.id);

  const rows = db.prepare(
    `SELECT word, translation, example FROM words WHERE user_id = ? ORDER BY word COLLATE NOCASE ASC`
  ).all(uid);

  if (!rows.length) {
    return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.');
  }

  let message = 'üìö *–¢–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫:*\n\n';
  for (const r of rows) {
    message += `‚Äì *${md(r.word)}* ‚Äî ${md(r.translation)}\n  _${md(r.example)}_\n\n`;
  }

  return ctx.reply(message.trim(), { parse_mode: 'Markdown' });
});

// /getremind: –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.command('getremind', ctx => {
  const uid = String(ctx.from.id);
  const row = db.prepare(`SELECT time FROM reminders WHERE user_id = ?`).get(uid);
  const t = row?.time || '10:00';
  return ctx.reply(`‚è∞ –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${t} (–∑–º—ñ–Ω–∏—Ç–∏: /setremind HH:MM)`);
});

// /setremind HH:MM: –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
bot.command('setremind', ctx => {
  const uid = String(ctx.from.id);
  const text = ctx.message?.text || '';
  const hhmm = text.split(/\s+/)[1]; // –±–µ—Ä–µ–º–æ –¥—Ä—É–≥–µ —Å–ª–æ–≤–æ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏

  if (!/^\d{2}:\d{2}$/.test(hhmm)) {
    return ctx.reply('–í–∫–∞–∂–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM, –Ω–∞–ø—Ä. /setremind 10:00');
  }
  const [hh, mm] = hhmm.split(':').map(Number);
  if (hh > 23 || mm > 59) {
    return ctx.reply('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å. –ü—Ä–∏–∫–ª–∞–¥: /setremind 09:30');
  }

  db.prepare(`
    INSERT INTO reminders (user_id, time)
    VALUES (?, ?)
    ON CONFLICT(user_id) DO UPDATE SET time=excluded.time
  `).run(uid, hhmm);

  return ctx.reply(`–ì–æ—Ç–æ–≤–æ! ‚è∞ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏–º—É –æ ${hhmm}.`);
});


// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message:text', async ctx => {
  const text = ctx.message.text.trim();
  const uid = String(ctx.from.id);
  if (text.startsWith('/')) return;
  const session = sessions[uid];
  if (session) {
    if (session.action === 'setup') {
      // –ê–Ω–∫–µ—Ç–∞
      switch (session.step) {
        case 1:
          session.data.name = text;
          session.step = 2;
          return ctx.reply(`–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, ${text}! –Ø–∫–∏–π —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –Ω—ñ–º–µ—Ü—å–∫–æ—ó? (A1, A2, B1, B2)`);
        case 2: {
        const lvl = text.toUpperCase().trim();
        const allowed = new Set(["A1", "A2", "B1", "B2"]);
        if (!allowed.has(lvl)) {
            return ctx.reply('–í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: A1, A2, B1, B2 üôÇ');
        }
        session.data.level = lvl;
        session.step = 3;
        return ctx.reply('–©–æ —Ö–æ—á–µ—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏? (—Ä–æ–∑–º–æ–≤–Ω–∞, –ª–µ–∫—Å–∏–∫–∞, –≥—Ä–∞–º–∞—Ç–∏–∫–∞, –≤–∏–º–æ–≤–∞)');
        }


case 3:
  session.data.goals = text.trim().toLowerCase();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è (—â–æ–± —Ç–æ—á–Ω–æ –Ω–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–º—ñ—Ç—Ç—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ step 2 –±—É–≤ –∑–ª–∞–º–∞–Ω–∏–π)
  const allowedLevels = new Set(["A1", "A2", "B1", "B2"]);
  if (!allowedLevels.has(session.data.level)) {
    session.step = 2;
    return ctx.reply('–í–∫–∞–∂–∏ —Ä—ñ–≤–µ–Ω—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: A1, A2, B1, B2 üôÇ');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª–µ–π
  const allowedGoals = new Set(["—Ä–æ–∑–º–æ–≤–Ω–∞", "–ª–µ–∫—Å–∏–∫–∞", "–≥—Ä–∞–º–∞—Ç–∏–∫–∞", "–≤–∏–º–æ–≤–∞"]);
  if (!allowedGoals.has(session.data.goals)) {
    return ctx.reply('–í–∫–∞–∂–∏ —Ü—ñ–ª—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: —Ä–æ–∑–º–æ–≤–Ω–∞, –ª–µ–∫—Å–∏–∫–∞, –≥—Ä–∞–º–∞—Ç–∏–∫–∞, –≤–∏–º–æ–≤–∞ üôÇ');
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
  db.prepare(
    `INSERT INTO preferences (user_id, name, level, goals)
     VALUES (?, ?, ?, ?)
     ON CONFLICT(user_id) DO UPDATE SET
       name=excluded.name,
       level=excluded.level,
       goals=excluded.goals`
  ).run(
    uid,
    session.data.name,
    session.data.level,
    session.data.goals
  );

  delete sessions[uid];
  return ctx.reply(
    `–ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n‚Äì –Ü–º‚Äô—è: ${session.data.name}\n‚Äì –†—ñ–≤–µ–Ω—å: ${session.data.level}\n‚Äì –¶—ñ–ª—ñ: ${session.data.goals}`
  );

      }
    }
    if (session.action === 'lesson' && session.inLesson) {
      // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —É—Ä–æ–∫
      const answer = text;
      const fb = await getFeedback(answer);
      await ctx.reply(`–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${answer}`);
      await ctx.reply(fb, { parse_mode: 'Markdown' });
      db.prepare(
        `UPDATE stats SET lessons_done = lessons_done + 1 WHERE user_id = ?`
      ).run(uid);
      delete sessions[uid];
      return;
    }
    if (session.action === 'addword') {
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞
      if (session.step === 1) {
        session.data.word = text;
        session.step = 2;
        return ctx.reply('–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª–æ–≤–∞:');
      }
      if (session.step === 2) {
        session.data.translation = text;
        session.step = 3;
        return ctx.reply('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —Ä–µ—á–µ–Ω–Ω—è:');
      }
      if (session.step === 3) {
        session.data.example = text;
        const now = new Date().toISOString();
        db.prepare(
          `INSERT INTO words (user_id, word, translation, example, nextReview, interval) VALUES (?, ?, ?, ?, ?, ?)`
        ).run(uid, session.data.word, session.data.translation, session.data.example, now, 1);
        delete sessions[uid];
        return ctx.reply(
          `–°–ª–æ–≤–æ *${session.data.word}* –¥–æ–¥–∞–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /review –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.`,
          { parse_mode:'Markdown' }
        );
      }
    }
  }
// // if (session?.action === "rateWord") {
// //   const rate = Number(text.trim());
// //   const cur = session.data.interval || 1;
// //   let nextDays = 1;

// //   if (rate === 1) nextDays = 1;                                  // Again
// //   else if (rate === 2) nextDays = Math.max(1, Math.round(cur * 1.4)); // Hard
// //   else if (rate === 3) nextDays = Math.max(1, cur * 2);          // Good
// //   else if (rate === 4) nextDays = Math.max(2, Math.round(cur * 2.8)); // Easy
// //   else return ctx.reply('–í–≤–µ–¥–∏ 1/2/3/4 üôÇ');

// //   const next = new Date(Date.now() + nextDays * 86400000).toISOString();
// //   db.prepare(`UPDATE words SET interval = ?, nextReview = ? WHERE id = ?`)
// //     .run(nextDays, next, session.data.wordId);

// //   delete sessions[uid];
// //   await ctx.reply('–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ');

// //   // –í–∏–∫–ª–∏–∫ –ª–æ–≥—ñ–∫–∏ review –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
// //   const nowIso = new Date().toISOString();
// // const rows = db.prepare(
// //   `SELECT * FROM words WHERE user_id = ? ORDER BY nextReview ASC LIMIT 1`
// // ).all(uid);


// //   if (!rows.length) {
// //     return ctx.reply('–°–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î ‚úÖ');
// //   }

// //   const row = rows[0];
// //   await ctx.reply(
// //     `‚Äì *${md(row.word)}* ‚Äî ${md(row.translation)}\n  _${md(row.example)}_`,
// //     { parse_mode: 'Markdown' }
// //   );
// //   await ctx.reply(
// //     `–û—Ü—ñ–Ω–∏, —è–∫ –∑–≥–∞–¥–∞–≤ —Å–ª–æ–≤–æ "${md(row.word)}":\n` +
// //     `1) Again  2) Hard  3) Good  4) Easy\n` +
// //     `–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ 1/2/3/4`
// //   );
// //   sessions[uid] = { action: "rateWord", data: { wordId: row.id, interval: row.interval || 1 } };
// //   return;
// }
//   await ctx.reply('Echo: ' + text);
});

bot.on('callback_query:data', async ctx => {
  const data = ctx.callbackQuery.data;

  // 4.1) –ö–Ω–æ–ø–∫–∞ "–ü–æ—á–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è"
  if (data === 'start_review') {
    await ctx.answerCallbackQuery(); // –∑–∞–∫—Ä–∏–≤–∞—î "–≥–æ–¥–∏–Ω–Ω–∏–∫" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    const uid = String(ctx.from.id);
    const nowIso = new Date().toISOString();

    const rows = db.prepare(
      `SELECT * FROM words
       WHERE user_id = ? AND nextReview <= ?
       ORDER BY nextReview ASC
       LIMIT 1`
    ).all(uid, nowIso);

    if (!rows.length) {
      return ctx.editMessageText('–°–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î ‚úÖ');
    }

    const row = rows[0];
    const keyboard = new InlineKeyboard()
      .text("üîÅ Again", `rate:${row.id}:1`)
      .text("üòì Hard", `rate:${row.id}:2`).row()
      .text("üôÇ Good", `rate:${row.id}:3`)
      .text("üöÄ Easy", `rate:${row.id}:4`);

    return ctx.editMessageText(
      `‚Äì *${md(row.word)}* ‚Äî ${md(row.translation)}\n  _${md(row.example)}_`,
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  }

  // 4.2) –û—Ü—ñ–Ω–∫–∏ (rate:wordId:score)
  const [action, wordId, rateStr] = data.split(':');
  if (action !== 'rate') return;

  const rate = Number(rateStr);
  const word = db.prepare(`SELECT * FROM words WHERE id = ?`).get(wordId);
  if (!word) {
    return ctx.answerCallbackQuery({ text: "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå", show_alert: true });
  }

  const cur = word.interval || 1;
  let nextDays = 1;
  if (rate === 1) nextDays = 1;
  else if (rate === 2) nextDays = Math.max(1, Math.round(cur * 1.4));
  else if (rate === 3) nextDays = Math.max(1, cur * 2);
  else if (rate === 4) nextDays = Math.max(2, Math.round(cur * 2.8));

  const next = new Date(Date.now() + nextDays * 86400000).toISOString();
  db.prepare(`UPDATE words SET interval = ?, nextReview = ? WHERE id = ?`)
    .run(nextDays, next, wordId);

  await ctx.answerCallbackQuery({ text: "–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ" });

  // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–µ —Å–ª–æ–≤–æ
  const uid = String(ctx.from.id);
  const nowIso2 = new Date().toISOString();
  const nextRows = db.prepare(
    `SELECT * FROM words
     WHERE user_id = ? AND nextReview <= ?
     ORDER BY nextReview ASC
     LIMIT 1`
  ).all(uid, nowIso2);

  if (!nextRows.length) {
    return ctx.editMessageText('–°–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î ‚úÖ');
  }

  const row2 = nextRows[0];
  const keyboard2 = new InlineKeyboard()
    .text("üîÅ Again", `rate:${row2.id}:1`)
    .text("üòì Hard", `rate:${row2.id}:2`).row()
    .text("üôÇ Good", `rate:${row2.id}:3`)
    .text("üöÄ Easy", `rate:${row2.id}:4`);

  return ctx.editMessageText(
    `‚Äì *${md(row2.word)}* ‚Äî ${md(row2.translation)}\n  _${md(row2.example)}_`,
    { parse_mode: 'Markdown', reply_markup: keyboard2 }
  );
});





// –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message:voice', async ctx => {
  const uid = String(ctx.from.id);
  const session = sessions[uid];
  if (session?.action === 'lesson' && session.inLesson) {
    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—Ä–æ–∫—É –≥–æ–ª–æ—Å–æ–º
    await ctx.reply('–û—Ç—Ä–∏–º–∞–≤ –≥–æ–ª–æ—Å, –æ–±—Ä–æ–±–ª—è—é‚Ä¶');
    try {
      const file = await ctx.getFile();
      const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
      const text = await transcribeVoice(url);
      await ctx.reply(`üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n${text}`);
      const fb = await getFeedback(text);
      await ctx.reply(fb, { parse_mode:'Markdown' });
      db.prepare(
        `UPDATE stats SET lessons_done = lessons_done + 1 WHERE user_id = ?`
      ).run(uid);
    } catch (e) {
      console.error(e);
      await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å.');
    } finally {
      delete sessions[uid];
    }
    return;
  }
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å—É
  await ctx.reply('–û–±—Ä–æ–±–∏–≤ –≥–æ–ª–æ—Å, –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–µ–∫—Å—Ç‚Ä¶');
  try {
    const file = await ctx.getFile();
    const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    const text = await transcribeVoice(url);
    db.prepare(
      `UPDATE stats SET voice_count = voice_count + 1 WHERE user_id = ?`
    ).run(uid);
    await ctx.reply(`üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n${text}`);
    const fb = await getFeedback(text);
    await ctx.reply(fb, { parse_mode:'Markdown' });
  } catch (e) {
    console.error(e);
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å—É.');
  }
});


// –©–æ—Ö–≤–∏–ª–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–º—É –∑–∞—Ä–∞–∑ —á–∞—Å –Ω–∞–≥–∞–¥–∞—Ç–∏
cron.schedule('* * * * *', async () => {
  try {
    // –ë–µ—Ä–µ–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å —Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM
    const now = new Date();
    const hh = String(now.getHours()).padStart(2, '0');
    const mm = String(now.getMinutes()).padStart(2, '0');
    const hhmm = `${hh}:${mm}`;

    // –ö–æ–º—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑
    const dueUsers = db.prepare(`SELECT user_id FROM reminders WHERE time = ?`).all(hhmm);
    if (!dueUsers.length) return;

    for (const u of dueUsers) {
      const uid = String(u.user_id);
      const nowIso = new Date().toISOString();
      // —á–∏ —î —â–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏
      const cnt = db.prepare(
        `SELECT COUNT(*) as c FROM words WHERE user_id = ? AND nextReview <= ?`
      ).get(uid, nowIso).c;

      if (cnt > 0) {
        const kb = new InlineKeyboard().text('‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è', 'start_review');
        await bot.api.sendMessage(
          uid,
          `–°—å–æ–≥–æ–¥–Ω—ñ —î —Å–ª–æ–≤–∞ –¥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: ${cnt}.`,
          { reply_markup: kb }
        );
      }
    }
  } catch (e) {
    console.error('cron error:', e);
  }
});


bot.start();